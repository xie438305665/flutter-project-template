// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:zsy/entitys/user_entity.dart';
import 'package:zsy/generated/json/user_entity_helper.dart';
import 'package:zsy/common/global/global_config.dart';
import 'package:zsy/generated/json/global_config_entity_helper.dart';

///json操作类
class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case UserEntity:
        return userEntityFromJson(data as UserEntity, json) as T;
      case UserObject:
        return userObjectFromJson(data as UserObject, json) as T;
      case UserObjectmanuFlags:
        return userObjectmanuFlagsFromJson(data as UserObjectmanuFlags, json)
            as T;
      case UserObjectUser:
        return userObjectUserFromJson(data as UserObjectUser, json) as T;
      case GlobalConfig:
        return globalConfigFromJson(data as GlobalConfig, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case UserEntity:
        return userEntityToJson(data as UserEntity);
      case UserObject:
        return userObjectToJson(data as UserObject);
      case UserObjectmanuFlags:
        return userObjectmanuFlagsToJson(data as UserObjectmanuFlags);
      case UserObjectUser:
        return userObjectUserToJson(data as UserObjectUser);
      case GlobalConfig:
        return globalConfigToJson(data as GlobalConfig);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {
      case 'UserEntity':
        return UserEntity().fromJson(json);
      case 'UserObject':
        return UserObject().fromJson(json);
      case 'UserObjectmanuFlags':
        return UserObjectmanuFlags().fromJson(json);
      case 'UserObjectUser':
        return UserObjectUser().fromJson(json);
      case 'GlobalConfigEntity':
        return GlobalConfig().fromJson(json);
    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {
      case 'UserEntity':
        return List<UserEntity>();
      case 'UserObject':
        return List<UserObject>();
      case 'UserObjectmanuFlags':
        return List<UserObjectmanuFlags>();
      case 'UserObjectUser':
        return List<UserObjectUser>();
      case 'GlobalConfigEntity':
        return List<GlobalConfig>();
    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}
